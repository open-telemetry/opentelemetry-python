{#
# Copyright The OpenTelemetry Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#}

{%- import 'common.j2' as common -%}

{%- macro to_python_instrument_factory(instrument) -%}
  {%- if instrument == "counter" -%}
    counter
  {%- elif instrument == "histogram" -%}
    histogram
  {%- elif instrument == "updowncounter" -%}
    up_down_counter
  {%- elif instrument == "gauge" -%}
    observable_gauge
  {%- endif -%}
{%- endmacro %}
{%- macro to_python_instrument_type(instrument) -%}
  {%- if instrument == "counter" -%}
    Counter
  {%- elif instrument == "histogram" -%}
    Histogram
  {%- elif instrument == "updowncounter" -%}
    UpDownCounter
  {%- elif instrument == "gauge" -%}
    ObservableGauge
  {%- endif -%}
{%- endmacro %}

{%- macro stable_class_ref(const_name, separator) -%}
{{stable_package}}.{{root_namespace}}_metrics{{separator}}{{const_name}}
{%- endmacro %}

{%- macro metric_brief(metric, const_name) -%}
"""
    {%- if metric | is_deprecated %}
Deprecated: {{ common.to_docstring(metric.deprecated)}}.
    {%- elif metric | is_stable and filter == "any" %}
Deprecated in favor of stable :py:const:`{{stable_class_ref(const_name, '.')}}`.
    {%- else -%}
    {%- set brief = common.to_docstring(metric.brief) -%}
    {%- if brief != "" %}
{{brief}}
    {%- endif %}
Instrument: {{ metric.instrument }}
Unit: {{ metric.unit }}
      {%- if metric.note %}
Note: {{ common.to_docstring(metric.note | indent) }}.
      {%- endif -%}
    {%- endif %}
"""
{%- endmacro -%}

{%- macro import_instrument_classes(metrics) -%}
  {% if filter == "any" %}
from opentelemetry.metrics import Meter

{%- if metrics | selectattr("instrument", "equalto", "histogram") | list | count > 0 %}
from opentelemetry.metrics import Histogram
    {%- endif %}

    {%- if metrics | selectattr("instrument", "equalto", "updowncounter") | list | count > 0 %}
from opentelemetry.metrics import UpDownCounter
    {%- endif %}

    {%- if metrics | selectattr("instrument", "equalto", "counter") | list | count > 0 %}
from opentelemetry.metrics import Counter
    {%- endif %}

    {%- if metrics | selectattr("instrument", "equalto", "gauge") | list | count > 0 %}
from typing import Callable, Generator, Iterable, Optional, Sequence, Union
from opentelemetry.metrics import CallbackOptions, ObservableGauge, Observation

# pylint: disable=invalid-name
CallbackT = Union[
    Callable[[CallbackOptions], Iterable[Observation]],
    Generator[Iterable[Observation], CallbackOptions, None],
]
    {%- endif %}
  {%- endif -%}
{%- endmacro-%}

{%- if root_namespace not in excluded_namespaces -%}
  {%- if filter != 'any' -%}
{%- set filtered_metrics = metrics | select(filter) | list -%}
  {%- else -%}
{%- set filtered_metrics = metrics -%}
  {%- endif -%}

  {%- if filtered_metrics | count > 0 -%}

{{ common.file_header()}}

from typing import Final
{{ import_instrument_classes(filtered_metrics) }}

  {%- for metric in filtered_metrics %}

{{metric.metric_name | to_const_name}}: Final = "{{metric.metric_name}}"
{{metric_brief(metric, metric.metric_name | to_const_name) }}

    {% if filter == "any" %}
      {% set metric_name = metric.metric_name | replace(".", "_") %}
      {%- if metric.instrument == "gauge" %}
def create_{{ metric_name }}(meter: Meter, callbacks: Optional[Sequence[CallbackT]]) -> {{to_python_instrument_type(metric.instrument)}}:
      {%- else %}
def create_{{ metric_name }}(meter: Meter) -> {{to_python_instrument_type(metric.instrument)}}:
      {%- endif %}
        {%- set brief = common.to_docstring(metric.brief) -%}
        {%- if brief != "" %}
    """{{brief}}"""
        {%- endif %}
    return meter.create_{{to_python_instrument_factory(metric.instrument)}}(
        name="{{ metric.metric_name }}",
      {%- if metric.instrument == "gauge" %}
        callbacks=callbacks,
      {%- endif %}
        description="{{ metric.brief }}",
        unit="{{ metric.unit }}",
    )
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
{%- endif -%}
