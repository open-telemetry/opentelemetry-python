{#
# Copyright The OpenTelemetry Authors
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#}

{%- import 'common.j2' as common -%}

{%- macro stable_class_ref(const_name, separator) -%}
{{stable_package}}.{{root_namespace}}_attributes{{separator}}{{const_name}}
{%- endmacro %}

{%- macro attribute_name(attribute) -%}
    {%- if attribute | is_template -%}
    {{attribute.fqn | to_const_name}}_TEMPLATE
    {%- else -%}
    {{attribute.fqn | to_const_name}}
    {%- endif -%}
{%- endmacro -%}

{%- macro attribute_brief(attribute) -%}
"""
    {%- if attribute | is_deprecated %}
Deprecated: {{ common.to_docstring(attribute.deprecated) }}.
    {%- elif attribute | is_stable and filter == "any" %}
Deprecated in favor of stable :py:const:`{{stable_class_ref(attribute_name(attribute), '.')}}`.
    {%- else %}
{{ common.to_docstring(attribute.brief) }}.
        {%- if attribute.note %}
Note: {{ common.to_docstring(attribute.note | indent)}}.
        {%- endif -%}
    {%- endif %}
"""
{%- endmacro -%}

{%- if root_namespace not in excluded_namespaces.split(' ') -%}
{%- set excluded_attributes_list = excluded_attributes.split(' ') -%}
{%- if filter != 'any' -%}
{%- set filtered_attributes = attributes_and_templates | select(filter) | list -%}
{%- else -%}
{%- set filtered_attributes = attributes_and_templates | list %}
{%- endif -%}
{%- if filtered_attributes | count > 0 -%}

{{ common.file_header()}}

{%- if filter != 'any' -%}
{%- set filtered_enum_attributes = enum_attributes | select(filter) | list %}
{%- else -%}
{%- set filtered_enum_attributes = enum_attributes | list %}
{%- endif -%}

from typing import Final

{{common.import_deprecated(filtered_enum_attributes)}}

{% if filtered_enum_attributes | count > 0 %}

from enum import Enum

{% else %}

{% endif %}

{% for attribute in filtered_attributes -%}
{%- set prefix = "# " if attribute.fqn in excluded_attributes else "" -%}
{{prefix}}{{attribute_name(attribute)}}: Final = "{{attribute.fqn}}"
{{attribute_brief(attribute)}}

{% endfor %}
{%- for attribute in filtered_enum_attributes | rejectattr("fqn", "in", excluded_attributes) -%}
{%- set class_name = attribute.fqn | to_camelcase(True) ~ "Values" -%}
    {%- if attribute | is_deprecated %}
@deprecated(reason="The attribute {{attribute.fqn}} is deprecated - {{ common.to_docstring(attribute.deprecated) }}")  # type: ignore
    {%- elif attribute | is_stable and filter == "any" %}
@deprecated(reason="Deprecated in favor of stable :py:const:`{{stable_class_ref(class_name, '.')}}`.")  # type: ignore
    {%- endif %}
class {{class_name}}(Enum):
    {%- for member in attribute.attr_type.members %}
    {{ member.member_id | to_const_name }}: Final = {{ attribute | print_member_value(member) }}
    """{{ common.to_docstring(member.brief) }}."""
    {%- endfor %}
{%- endfor -%}
{%- endif -%}
{%- endif -%}
