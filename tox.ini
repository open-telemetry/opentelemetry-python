[tox]
isolated_build = True
skipsdist = True
skip_missing_interpreters = True
envlist =
    ; Environments are organized by individual package, allowing
    ; for specifying supported Python versions per package.
    py3{8,9,10,11,12}-opentelemetry-api
    pypy3-opentelemetry-api

    ; The numbers at the end of the environment names
    ; below mean these dependencies are being used:
    ; 0: protobuf==3.20.3
    ; 1: protobuf==4.25.3
    py3{8,9,10,11,12}-opentelemetry-protobuf-{0,1}
    pypy3-opentelemetry-protobuf-{0,1}

    py3{8,9,10,11,12}-opentelemetry-sdk
    pypy3-opentelemetry-sdk

    py3{8,9,10,11,12}-opentelemetry-semantic-conventions
    pypy3-opentelemetry-semantic-conventions

    ; docs/getting-started
    py3{8,9,10,11,12}-opentelemetry-getting-started
    pypy3-opentelemetry-getting-started

    py3{8,9,10,11,12}-opentelemetry-opentracing-shim
    pypy3-opentelemetry-opentracing-shim

    py3{8,9,10,11,12}-opentelemetry-opencensus-shim
    ; opencensus-shim intentionally excluded from pypy3 (grpcio install fails)

    py3{8,9,10,11,12}-opentelemetry-exporter-opencensus
    ; exporter-opencensus intentionally excluded from pypy3

    ; The numbers at the end of the environment names
    ; below mean these dependencies are being used:
    ; 0: protobuf==3.20.3
    ; 1: protobuf==4.25.3
    py3{8,9,10,11,12}-opentelemetry-exporter-otlp-proto-common-{0,1}
    pypy3-opentelemetry-exporter-otlp-proto-common-{0,1}

    ; opentelemetry-exporter-otlp
    py3{8,9,10,11,12}-opentelemetry-exporter-otlp-combined
    ; intentionally excluded from pypy3

    ; The numbers at the end of the environment names
    ; below mean these dependencies are being used:
    ; 0: protobuf==3.20.3
    ; 1: protobuf==4.25.3
    py3{8,9,10,11,12}-opentelemetry-exporter-otlp-proto-grpc-{0,1}
    ; intentionally excluded from pypy3

    ; The numbers at the end of the environment names
    ; below mean these dependencies are being used:
    ; 0: protobuf==3.20.3
    ; 1: protobuf==4.25.3
    py3{8,9,10,11,12}-opentelemetry-exporter-otlp-proto-http-{0,1}
    pypy3-opentelemetry-exporter-otlp-proto-http-{0,1}

    py3{8,9,10,11,12}-opentelemetry-exporter-prometheus
    pypy3-opentelemetry-exporter-prometheus

    ; opentelemetry-exporter-zipkin
    py3{8,9,10,11,12}-opentelemetry-exporter-zipkin-combined
    pypy3-opentelemetry-exporter-zipkin-combined

    py3{8,9,10,11,12}-opentelemetry-exporter-zipkin-proto-http
    pypy3-opentelemetry-exporter-zipkin-proto-http

    py3{8,9,10,11,12}-opentelemetry-exporter-zipkin-json
    pypy3-opentelemetry-exporter-zipkin-json

    py3{8,9,10,11,12}-opentelemetry-propagator-b3
    pypy3-opentelemetry-propagator-b3

    py3{8,9,10,11,12}-opentelemetry-propagator-jaeger
    pypy3-opentelemetry-propagator-jaeger

    py3{8,9,10,11,12}-opentelemetry-test-utils
    pypy3-opentelemetry-test-utils

    lint
    spellcheck
    tracecontext
    mypy,mypyinstalled
    docs
    docker-tests-proto{3,4}
    public-symbols-check

[testenv]
deps =
  -c dev-requirements.txt
  opentelemetry: pytest
  opentelemetry: pytest-benchmark
  opentelemetry: flaky
  coverage: pytest
  coverage: pytest-cov
  mypy,mypyinstalled: mypy

  ; proto 3 and 4 tests install the respective version of protobuf
  proto3: protobuf~=3.19.0
  proto4: protobuf~=4.0


setenv =
  ; override CONTRIB_REPO_SHA via env variable when testing other branches/commits than main
  ; i.e: CONTRIB_REPO_SHA=dde62cebffe519c35875af6d06fae053b3be65ec tox -e <env to test>
  CONTRIB_REPO_SHA={env:CONTRIB_REPO_SHA:main}
  CONTRIB_REPO=git+https://github.com/open-telemetry/opentelemetry-python-contrib.git@{env:CONTRIB_REPO_SHA}
  mypy: MYPYPATH={toxinidir}/opentelemetry-api/src/:{toxinidir}/tests/opentelemetry-test-utils/src/

commands_pre =

  api: pip install -r {toxinidir}/opentelemetry-api/test-requirements.txt

  sdk: pip install -r {toxinidir}/opentelemetry-sdk/test-requirements.txt

  semantic-conventions: pip install -r {toxinidir}/opentelemetry-semantic-conventions/test-requirements.txt

  test-utils: pip install -r {toxinidir}/tests/opentelemetry-test-utils/test-requirements.txt

  protobuf-0: pip install -r {toxinidir}/opentelemetry-proto/test-requirements-0.txt
  protobuf-1: pip install -r {toxinidir}/opentelemetry-proto/test-requirements-1.txt

  getting-started: pip install -r {toxinidir}/docs/getting_started/tests/requirements.txt
  getting-started: pip install -e {env:CONTRIB_REPO}\#egg=opentelemetry-util-http&subdirectory=util/opentelemetry-util-http
  getting-started: pip install -e {env:CONTRIB_REPO}\#egg=opentelemetry-instrumentation&subdirectory=opentelemetry-instrumentation
  getting-started: pip install -e {env:CONTRIB_REPO}\#egg=opentelemetry-instrumentation-requests&subdirectory=instrumentation/opentelemetry-instrumentation-requests
  getting-started: pip install -e {env:CONTRIB_REPO}\#egg=opentelemetry-instrumentation-wsgi&subdirectory=instrumentation/opentelemetry-instrumentation-wsgi
  getting-started: pip install -e {env:CONTRIB_REPO}\#egg=opentelemetry-instrumentation-flask&subdirectory=instrumentation/opentelemetry-instrumentation-flask

  exporter-opencensus: pip install -r {toxinidir}/exporter/opentelemetry-exporter-opencensus/test-requirements.txt

  exporter-otlp-proto-common-0: pip install -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-common/test-requirements-0.txt
  exporter-otlp-proto-common-1: pip install -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-common/test-requirements-1.txt

  exporter-otlp-combined: pip install -r {toxinidir}/exporter/opentelemetry-exporter-otlp/test-requirements.txt

  opentelemetry-exporter-otlp-proto-grpc-0: pip install -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc/test-requirements-0.txt
  opentelemetry-exporter-otlp-proto-grpc-1: pip install -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc/test-requirements-1.txt

  opentelemetry-exporter-otlp-proto-http-0: pip install -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http/test-requirements-0.txt
  opentelemetry-exporter-otlp-proto-http-1: pip install -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http/test-requirements-1.txt

  opentracing-shim: pip install -r {toxinidir}/shim/opentelemetry-opentracing-shim/test-requirements.txt

  opencensus-shim: pip install -r {toxinidir}/shim/opentelemetry-opencensus-shim/test-requirements.txt

  exporter-prometheus: pip install -r {toxinidir}/exporter/opentelemetry-exporter-prometheus/test-requirements.txt

  exporter-zipkin-combined: pip install -r {toxinidir}/exporter/opentelemetry-exporter-zipkin/test-requirements.txt

  exporter-zipkin-proto-http: pip install -r {toxinidir}/exporter/opentelemetry-exporter-zipkin-proto-http/test-requirements.txt

  exporter-zipkin-json: pip install -r {toxinidir}/exporter/opentelemetry-exporter-zipkin-json/test-requirements.txt

  propagator-b3: pip install -r {toxinidir}/propagator/opentelemetry-propagator-b3/test-requirements.txt

  propagator-jaeger: pip install -r {toxinidir}/propagator/opentelemetry-propagator-jaeger/test-requirements.txt

; In order to get a healthy coverage report,
; we have to install packages in editable mode.
  coverage: python {toxinidir}/scripts/eachdist.py install --editable

; Using file:// here because otherwise tox invokes just "pip install
; opentelemetry-api", leading to an error
  mypyinstalled: pip install file://{toxinidir}/opentelemetry-api/

commands =
  api: pytest {toxinidir}/opentelemetry-api/tests {posargs}
  sdk: pytest {toxinidir}/opentelemetry-sdk/tests {posargs}
  protobuf: pytest {toxinidir}/opentelemetry-proto/tests {posargs}
  semantic-conventions: pytest {toxinidir}/opentelemetry-semantic-conventions/tests {posargs}
  getting-started: pytest {toxinidir}/docs/getting_started/tests {posargs}
  opentracing-shim: pytest {toxinidir}/shim/opentelemetry-opentracing-shim/tests {posargs}
  opencensus-shim: pytest {toxinidir}/shim/opentelemetry-opencensus-shim/tests {posargs}

  exporter-opencensus: pytest {toxinidir}/exporter/opentelemetry-exporter-opencensus/tests {posargs}
  exporter-otlp-proto-common: pytest {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-common/tests {posargs}
  exporter-otlp-combined: pytest {toxinidir}/exporter/opentelemetry-exporter-otlp/tests {posargs}
  exporter-otlp-proto-grpc: pytest {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc/tests {posargs}
  exporter-otlp-proto-http: pytest {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http/tests {posargs}
  exporter-prometheus: pytest {toxinidir}/exporter/opentelemetry-exporter-prometheus/tests {posargs}
  exporter-zipkin-combined: pytest {toxinidir}/exporter/opentelemetry-exporter-zipkin/tests {posargs}
  exporter-zipkin-proto-http: pytest {toxinidir}/exporter/opentelemetry-exporter-zipkin-proto-http/tests {posargs}
  exporter-zipkin-json: pytest {toxinidir}/exporter/opentelemetry-exporter-zipkin-json/tests {posargs}

  propagator-b3: pytest {toxinidir}/propagator/opentelemetry-propagator-b3/tests {posargs}
  propagator-jaeger: pytest {toxinidir}/propagator/opentelemetry-propagator-jaeger/tests {posargs}
  test-utils: pytest {toxinidir}/tests/opentelemetry-test-utils/tests {posargs}

  coverage: {toxinidir}/scripts/coverage.sh

  mypy: mypy --install-types --non-interactive --namespace-packages --explicit-package-bases opentelemetry-api/src/opentelemetry/

; For test code, we don't want to enforce the full mypy strictness
  mypy: mypy --install-types --non-interactive --namespace-packages --config-file=mypy-relaxed.ini opentelemetry-api/tests/

; Test that mypy can pick up typeinfo from an installed package (otherwise,
; implicit Any due to unfollowed import would result).
  mypyinstalled: mypy --install-types --non-interactive --namespace-packages opentelemetry-api/tests/mypysmoke.py --strict

[testenv:spellcheck]
basepython: python3
recreate = True
deps =
  codespell==2.2.6

commands =
  codespell

[testenv:lint]
basepython: python3
recreate = True
deps =
  -r dev-requirements.txt

commands_pre =
  pip install -r {toxinidir}/opentelemetry-api/test-requirements.txt \
  -r {toxinidir}/opentelemetry-sdk/test-requirements.txt \
  -r {toxinidir}/opentelemetry-semantic-conventions/test-requirements.txt \
  -r {toxinidir}/opentelemetry-proto/test-requirements-0.txt \
  -r {toxinidir}/shim/opentelemetry-opentracing-shim/test-requirements.txt \
  -r {toxinidir}/shim/opentelemetry-opencensus-shim/test-requirements.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-opencensus/test-requirements.txt \
  -r {toxinidir}/tests/opentelemetry-test-utils/test-requirements.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-common/test-requirements-0.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http/test-requirements-0.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc/test-requirements-0.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-prometheus/test-requirements.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-zipkin-proto-http/test-requirements.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-zipkin-json/test-requirements.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-otlp/test-requirements.txt \
  -r {toxinidir}/exporter/opentelemetry-exporter-zipkin/test-requirements.txt \
  -r {toxinidir}/propagator/opentelemetry-propagator-b3/test-requirements.txt \
  -r {toxinidir}/propagator/opentelemetry-propagator-jaeger/test-requirements.txt

commands =
  python scripts/eachdist.py lint --check-only

[testenv:docs]
basepython: python3
recreate = True
deps =
  -c {toxinidir}/dev-requirements.txt
  -r {toxinidir}/docs-requirements.txt
changedir = docs
commands =
  sphinx-build -E -a -W -b html -T . _build/html

[testenv:tracecontext]
basepython: python3
deps =
  # needed for tracecontext
  aiohttp~=3.6
  # needed for example trace integration
  flask~=2.3
  requests~=2.7
  markupsafe~=2.1

allowlist_externals =
  {toxinidir}/scripts/tracecontext-integration-test.sh

commands_pre =
  pip install -e {toxinidir}/opentelemetry-api \
              -e {toxinidir}/opentelemetry-semantic-conventions \
              -e {toxinidir}/opentelemetry-sdk \
              -e {env:CONTRIB_REPO}\#egg=opentelemetry-util-http&subdirectory=util/opentelemetry-util-http \
              -e {env:CONTRIB_REPO}\#egg=opentelemetry-instrumentation&subdirectory=opentelemetry-instrumentation \
              -e {env:CONTRIB_REPO}\#egg=opentelemetry-instrumentation-requests&subdirectory=instrumentation/opentelemetry-instrumentation-requests \
              -e {env:CONTRIB_REPO}\#egg=opentelemetry-instrumentation-wsgi&subdirectory=instrumentation/opentelemetry-instrumentation-wsgi

commands =
  {toxinidir}/scripts/tracecontext-integration-test.sh

[testenv:docker-tests-proto{3,4}]
deps =
  pytest==7.1.3
  # Pinning PyYAML for issue: https://github.com/yaml/pyyaml/issues/724
  PyYAML==5.3.1
  # Pinning docker for issue: https://github.com/docker/compose/issues/11309
  docker<7
  docker-compose==1.29.2
  requests==2.28.2

  ; proto 3 and 4 tests install the respective version of protobuf
  proto3: protobuf~=3.19.0
  proto4: protobuf~=4.0

changedir =
  tests/opentelemetry-docker-tests/tests

commands_pre =
  pip freeze
  pip install -e {toxinidir}/opentelemetry-api \
              -e {toxinidir}/opentelemetry-semantic-conventions \
              -e {toxinidir}/opentelemetry-sdk \
              -e {toxinidir}/tests/opentelemetry-test-utils \
  ; opencensus exporter does not work with protobuf 4
  proto3:     -e {toxinidir}/exporter/opentelemetry-exporter-opencensus \
              -e {toxinidir}/opentelemetry-proto \
              -e {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-common \
              -e {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc \
              -e {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http \
              -e {toxinidir}/exporter/opentelemetry-exporter-otlp
  docker-compose up -d
commands =
  proto3: pytest {posargs}
  ; opencensus exporter does not work with protobuf 4
  proto4: pytest --ignore opencensus {posargs}

commands_post =
  docker-compose down -v

[testenv:public-symbols-check]
basepython: python3
recreate = True
deps =
  GitPython==3.1.40
commands =
  python {toxinidir}/scripts/public_symbols_checker.py
