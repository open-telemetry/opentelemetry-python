[tox]
skipsdist = True
skip_missing_interpreters = True
envlist =
    ; Environments are organized by individual package, allowing
    ; for specifying supported Python versions per package.
    py3{6,7,8,9,10}-opentelemetry-api
    pypy3-opentelemetry-api

    py3{6,7,8,9,10}-opentelemetry-protobuf
    pypy3-opentelemetry-protobuf

    py3{6,7,8,9,10}-opentelemetry-sdk
    pypy3-opentelemetry-sdk

    py3{6,7,8,9,10}-opentelemetry-semantic-conventions
    pypy3-opentelemetry-semantic-conventions

    ; docs/getting-started
    py3{6,7,8,9,10}-opentelemetry-getting-started
    pypy3-opentelemetry-getting-started

    py3{6,7,8,9,10}-opentelemetry-opentracing-shim
    pypy3-opentelemetry-opentracing-shim

    py3{6,7,8,9,10}-opentelemetry-exporter-jaeger-combined

    py3{6,7,8,9,10}-opentelemetry-exporter-jaeger-proto-grpc

    py3{6,7,8,9,10}-opentelemetry-exporter-jaeger-thrift

    py3{6,7,8,9,10}-opentelemetry-exporter-opencensus
    ; exporter-opencensus intentionally excluded from pypy3

    ; opentelemetry-exporter-otlp
    py3{6,7,8,9,10}-opentelemetry-exporter-otlp-combined
    ; intentionally excluded from pypy3

    py3{6,7,8,9,10}-opentelemetry-exporter-otlp-proto-grpc
    ; intentionally excluded from pypy3

    py3{6,7,8,9,10}-opentelemetry-exporter-otlp-proto-http
    pypy3-opentelemetry-exporter-otlp-proto-http

    py3{6,7,8,9,10}-opentelemetry-exporter-prometheus
    pypy3-opentelemetry-exporter-prometheus

    ; opentelemetry-exporter-zipkin
    py3{6,7,8,9,10}-opentelemetry-exporter-zipkin-combined
    pypy3-opentelemetry-exporter-zipkin-combined

    py3{6,7,8,9,10}-opentelemetry-exporter-zipkin-proto-http
    pypy3-opentelemetry-exporter-zipkin-proto-http

    py3{6,7,8,9,10}-opentelemetry-exporter-zipkin-json
    pypy3-opentelemetry-exporter-zipkin-json

    py3{6,7,8,9,10}-opentelemetry-propagator-b3
    pypy3-opentelemetry-propagator-b3

    py3{6,7,8,9,10}-opentelemetry-propagator-jaeger
    pypy3-opentelemetry-propagator-jaeger

    lint
    tracecontext
    mypy,mypyinstalled
    docs
    docker-tests
    public-symbols-check

[testenv]
deps =
  -c dev-requirements.txt
  opentelemetry: pytest
  opentelemetry: pytest-benchmark
  opentelemetry: flaky
  coverage: pytest
  coverage: pytest-cov
  mypy,mypyinstalled: mypy

setenv =
  ; override CONTRIB_REPO_SHA via env variable when testing other branches/commits than main
  ; i.e: CONTRIB_REPO_SHA=dde62cebffe519c35875af6d06fae053b3be65ec tox -e <env to test>
  CONTRIB_REPO_SHA={env:CONTRIB_REPO_SHA:"main"}
  CONTRIB_REPO="git+https://github.com/open-telemetry/opentelemetry-python-contrib.git@{env:CONTRIB_REPO_SHA}"
  mypy: MYPYPATH={toxinidir}/opentelemetry-api/src/:{toxinidir}/tests/opentelemetry-test-utils/src/

changedir =
  api: opentelemetry-api/tests
  sdk: opentelemetry-sdk/tests
  protobuf: opentelemetry-proto/tests
  semantic-conventions: opentelemetry-semantic-conventions/tests
  getting-started: docs/getting_started/tests
  opentracing-shim: shim/opentelemetry-opentracing-shim/tests

  exporter-jaeger-combined: exporter/opentelemetry-exporter-jaeger/tests
  exporter-jaeger-proto-grpc: exporter/opentelemetry-exporter-jaeger-proto-grpc/tests
  exporter-jaeger-thrift: exporter/opentelemetry-exporter-jaeger-thrift/tests
  exporter-opencensus: exporter/opentelemetry-exporter-opencensus/tests
  exporter-otlp-combined: exporter/opentelemetry-exporter-otlp/tests
  exporter-otlp-proto-grpc: exporter/opentelemetry-exporter-otlp-proto-grpc/tests
  exporter-otlp-proto-http: exporter/opentelemetry-exporter-otlp-proto-http/tests
  exporter-prometheus: exporter/opentelemetry-exporter-prometheus/tests
  exporter-zipkin-combined: exporter/opentelemetry-exporter-zipkin/tests
  exporter-zipkin-proto-http: exporter/opentelemetry-exporter-zipkin-proto-http/tests
  exporter-zipkin-json: exporter/opentelemetry-exporter-zipkin-json/tests

  propagator-b3: propagator/opentelemetry-propagator-b3/tests
  propagator-jaeger: propagator/opentelemetry-propagator-jaeger/tests

commands_pre =
; Install without -e to test the actual installation
  py3{6,7,8,9,10}: python -m pip install -U pip setuptools wheel
; Install common packages for all the tests. These are not needed in all the
; cases but it saves a lot of boilerplate in this file.
  opentelemetry: pip install {toxinidir}/opentelemetry-api {toxinidir}/opentelemetry-semantic-conventions {toxinidir}/opentelemetry-sdk {toxinidir}/tests/opentelemetry-test-utils

  protobuf: pip install {toxinidir}/opentelemetry-proto

  getting-started: pip install requests==2.26.0 flask==2.0.1
  getting-started: pip install -e "{env:CONTRIB_REPO}#egg=opentelemetry-util-http&subdirectory=util/opentelemetry-util-http"
  getting-started: pip install -e "{env:CONTRIB_REPO}#egg=opentelemetry-instrumentation&subdirectory=opentelemetry-instrumentation"
  getting-started: pip install -e "{env:CONTRIB_REPO}#egg=opentelemetry-instrumentation-requests&subdirectory=instrumentation/opentelemetry-instrumentation-requests"
  getting-started: pip install -e "{env:CONTRIB_REPO}#egg=opentelemetry-instrumentation-wsgi&subdirectory=instrumentation/opentelemetry-instrumentation-wsgi"
  getting-started: pip install -e "{env:CONTRIB_REPO}#egg=opentelemetry-instrumentation-flask&subdirectory=instrumentation/opentelemetry-instrumentation-flask"

  opencensus: pip install {toxinidir}/exporter/opentelemetry-exporter-opencensus

  exporter-otlp-combined: pip install {toxinidir}/opentelemetry-proto
  exporter-otlp-combined: pip install {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc
  exporter-otlp-combined: pip install {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http
  exporter-otlp-combined: pip install {toxinidir}/exporter/opentelemetry-exporter-otlp

  exporter-otlp-proto-grpc: pip install {toxinidir}/opentelemetry-proto
  exporter-otlp-proto-grpc: pip install {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc

  exporter-otlp-proto-http: pip install {toxinidir}/opentelemetry-proto
  exporter-otlp-proto-http: pip install {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http

  exporter-jaeger-combined: pip install {toxinidir}/exporter/opentelemetry-exporter-jaeger-proto-grpc {toxinidir}/exporter/opentelemetry-exporter-jaeger-thrift {toxinidir}/exporter/opentelemetry-exporter-jaeger
  exporter-jaeger-proto-grpc: pip install {toxinidir}/exporter/opentelemetry-exporter-jaeger-proto-grpc
  exporter-jaeger-thrift: pip install {toxinidir}/exporter/opentelemetry-exporter-jaeger-thrift

  opentracing-shim: pip install {toxinidir}/opentelemetry-sdk
  opentracing-shim: pip install {toxinidir}/shim/opentelemetry-opentracing-shim

  exporter-prometheus: pip install {toxinidir}/exporter/opentelemetry-exporter-prometheus

  exporter-zipkin-combined: pip install {toxinidir}/exporter/opentelemetry-exporter-zipkin-json
  exporter-zipkin-combined: pip install {toxinidir}/exporter/opentelemetry-exporter-zipkin-proto-http
  exporter-zipkin-combined: pip install {toxinidir}/exporter/opentelemetry-exporter-zipkin

  exporter-zipkin-proto-http: pip install {toxinidir}/exporter/opentelemetry-exporter-zipkin-json
  exporter-zipkin-proto-http: pip install {toxinidir}/exporter/opentelemetry-exporter-zipkin-proto-http

  exporter-zipkin-json: pip install {toxinidir}/exporter/opentelemetry-exporter-zipkin-json

  b3: pip install {toxinidir}/propagator/opentelemetry-propagator-b3

  propagator-jaeger: pip install {toxinidir}/propagator/opentelemetry-propagator-jaeger

; In order to get a healthy coverage report,
; we have to install packages in editable mode.
  coverage: python {toxinidir}/scripts/eachdist.py install --editable

; Using file:// here because otherwise tox invokes just "pip install
; opentelemetry-api", leading to an error
  mypyinstalled: pip install file://{toxinidir}/opentelemetry-api/

commands =
  opentelemetry: pytest {posargs}
  coverage: {toxinidir}/scripts/coverage.sh

  mypy: mypy --install-types --non-interactive --namespace-packages --explicit-package-bases opentelemetry-api/src/opentelemetry/

; For test code, we don't want to enforce the full mypy strictness
  mypy: mypy --install-types --non-interactive --namespace-packages --config-file=mypy-relaxed.ini opentelemetry-api/tests/

; Test that mypy can pick up typeinfo from an installed package (otherwise,
; implicit Any due to unfollowed import would result).
  mypyinstalled: mypy --install-types --non-interactive --namespace-packages opentelemetry-api/tests/mypysmoke.py --strict

[testenv:lint]
basepython: python3.9
recreate = True
deps =
  -c dev-requirements.txt
  asgiref
  pylint
  flake8
  isort
  black
  psutil
  readme_renderer
  httpretty
  GitPython

commands_pre =
  python -m pip install -e {toxinidir}/opentelemetry-api[test]
  python -m pip install -e {toxinidir}/opentelemetry-semantic-conventions[test]
  python -m pip install -e {toxinidir}/opentelemetry-sdk[test]
  # Pin protobuf version due to lint failing on v3.20.0
  # https://github.com/protocolbuffers/protobuf/issues/9730
  python -m pip install protobuf==3.19.4
  python -m pip install -e {toxinidir}/opentelemetry-proto[test]
  python -m pip install -e {toxinidir}/tests/opentelemetry-test-utils[test]
  python -m pip install -e {toxinidir}/shim/opentelemetry-opentracing-shim[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-jaeger-proto-grpc[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-jaeger-thrift[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-jaeger[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-opencensus[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-otlp[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-prometheus[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-zipkin-json[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-zipkin-proto-http[test]
  python -m pip install -e {toxinidir}/exporter/opentelemetry-exporter-zipkin[test]
  python -m pip install -e {toxinidir}/propagator/opentelemetry-propagator-b3[test]
  python -m pip install -e {toxinidir}/propagator/opentelemetry-propagator-jaeger[test]

commands =
  python scripts/eachdist.py lint --check-only

[testenv:docs]
recreate = True
deps =
  -c {toxinidir}/dev-requirements.txt
  -r {toxinidir}/docs-requirements.txt

changedir = docs

commands =
  sphinx-build -E -a -W -b html -T . _build/html

[testenv:tracecontext]
basepython: python3.9
deps =
  # needed for tracecontext
  aiohttp~=3.6
  # needed for example trace integration
  flask~=1.1
  requests~=2.7
  # temporary fix. we should update the jinja, flask deps
  # See https://github.com/pallets/markupsafe/issues/282
  # breaking change introduced in markupsafe causes jinja, flask to break
  markupsafe==2.0.1

commands_pre =
  pip install -e {toxinidir}/opentelemetry-api \
              -e {toxinidir}/opentelemetry-semantic-conventions \
              -e {toxinidir}/opentelemetry-sdk \
              -e "{env:CONTRIB_REPO}#egg=opentelemetry-util-http&subdirectory=util/opentelemetry-util-http" \
              -e "{env:CONTRIB_REPO}#egg=opentelemetry-instrumentation&subdirectory=opentelemetry-instrumentation" \
              -e "{env:CONTRIB_REPO}#egg=opentelemetry-instrumentation-requests&subdirectory=instrumentation/opentelemetry-instrumentation-requests" \
              -e "{env:CONTRIB_REPO}#egg=opentelemetry-instrumentation-wsgi&subdirectory=instrumentation/opentelemetry-instrumentation-wsgi"

commands =
  {toxinidir}/scripts/tracecontext-integration-test.sh

[testenv:docker-tests]
deps =
  pytest
  docker-compose >= 1.25.2

changedir =
  tests/opentelemetry-docker-tests/tests

commands_pre =
  pip install -e {toxinidir}/opentelemetry-api \
              -e {toxinidir}/opentelemetry-semantic-conventions \
              -e {toxinidir}/opentelemetry-sdk \
              -e {toxinidir}/tests/opentelemetry-test-utils \
              -e {toxinidir}/exporter/opentelemetry-exporter-opencensus \
              -e {toxinidir}/opentelemetry-proto \
              -e {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-grpc \
              -e {toxinidir}/exporter/opentelemetry-exporter-otlp-proto-http \
              -e {toxinidir}/exporter/opentelemetry-exporter-otlp
  docker-compose up -d	
commands =
  pytest {posargs}
commands_post =
  docker-compose down -v

[testenv:public-symbols-check]
basepython: python3.9
recreate = True
deps =
  GitPython
commands =
  python {toxinidir}/scripts/public_symbols_checker.py
