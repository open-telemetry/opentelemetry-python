version: 2.1

executors:
  py38:
    docker:
      - image: circleci/python:3.8
  py37:
    docker:
      - image: circleci/python:3.7
  py36:
    docker:
      - image: circleci/python:3.6
  py35:
    docker:
      - image: circleci/python:3.5
  py34:
    docker:
      - image: circleci/python:3.4
  pypy3:
    docker:
      - image: pypy:3

commands:
  setup_tox:
    description: "Install tox"
    steps:
      - run: pip install -U tox-factor

  restore_tox_cache:
    description: "Restore .tox directory from previous runs for faster installs"
    steps:
      - restore_cache:
          # In the cache key:
          #   - .Environment.CIRCLE_JOB: We do separate tox environments by job name, so caching and restoring is
          #                              much faster.
          key: tox-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}-{{ checksum "dev-requirements.txt" }}

  save_tox_cache:
    description: "Save .tox directory into cache for faster installs next time"
    steps:
      - save_cache:
          # In the cache key:
          #   - .Environment.CIRCLE_JOB: We do separate tox environments by job name, so caching and restoring is
          #                              much faster.
          key: tox-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}-{{ checksum "dev-requirements.txt" }}
          paths:
            - ".tox"

  run_tox_scenario:
    description: "Run scripts/run-tox-scenario with setup, caching and persistence"
    parameters:
      pattern:
        type: string
    steps:
      - checkout
      - setup_tox
      - restore_tox_cache
      - run:
          name: "Run scripts/run-tox-scenario"
          command: tox -f '<< parameters.pattern >>'
      - save_tox_cache

jobs:
  docs:
    executor: py38
    steps:
      - run_tox_scenario:
          pattern: docs

  docker-tests:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: "Get pyenv list"
          command: pyenv versions
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run:
          name: "Update pip"
          command: pip install -U pip
      - setup_tox
      - restore_tox_cache
      - run: tox -e docker-tests
      - save_tox_cache

  lint:
    executor: py38
    steps:
      - run_tox_scenario:
          pattern: lint

  build-py38:
    parameters:
      package:
        type: string
    executor: py38
    steps:
      - run_tox_scenario:
          pattern: py38-<< parameters.package >>

  build-py34:
    parameters:
      package:
        type: string
        default: "core"
    executor: py34
    steps:
      - checkout
      - run:
          name: "Install tox"
          command: sudo pip install -U tox virtualenv tox-factor
      - restore_tox_cache
      - run:
          name: "Run scripts/run-tox-scenario"
          command: tox -f py34-<< parameters.package >>
      - save_tox_cache

  build:
    parameters:
      version:
        type: string
        default: "py38"
      package:
        type: string
        default: "core"
    executor: << parameters.version >>
    steps:
      - run_tox_scenario:
          pattern: << parameters.version >>-<< parameters.package >>

workflows:
  circleci-build:
    jobs:
      - build-py38:
          matrix:
            parameters:
              package: ["core", "exporter", "instrumentation", "tracecontext", "mypy", "mypyinstalled"]
      - build:
          matrix:
            parameters:
              version: ["py38", "py37", "py36", "py35", "pypy3"]
              package: ["core", "exporter", "instrumentation"]
      - build-py34:
          matrix:
            parameters:
              package: ["core", "exporter", "instrumentation"]
      - docs
      - lint
      - docker-tests
