name: Prepare release branch
on:
  workflow_dispatch:

jobs:
  prereqs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: |
          version=$(.github/scripts/get-version.sh)
          version=${version//-dev/}
          if ! grep --quiet "^## Version $version " CHANGELOG.md; then
            echo the change log needs to be updated
            exit 1
          fi

  create-pull-request-against-release-branch:
    runs-on: ubuntu-latest
    needs: prereqs
    steps:
      - uses: actions/checkout@v3

      - name: Create release branch
        id: create-release-branch
        run: |
          stable_version=$(./scripts/eachdist.py version --mode stable)
          stable_version=${stable_version//-dev/}

          prerelease_version=$(./scripts/eachdist.py version --mode prerelease)
          prerelease_version=${prerelease_version//-dev/}

          if [[ $stable_version =~ ^([0-9]+)\.([0-9]+)\.0$ ]]; then
            stable_version_branch_part=$(echo $stable_version | sed -E 's/([0-9]+)\.([0-9]+)\.0/\1.\2.x/')
          elif [[ $stable_version =~ ^([0-9]+)\.([0-9]+)\.0 ]]; then
            # pre-release version, e.g. 1.9.0rc
            stable_version_branch_part="release/v$stable_version"
          else
            echo "unexpected version: $version"
            exit 1
          fi

          prerelease_version_branch_part=$(echo $prerelease_version | sed -E 's/0\.([0-9]+)b0/0.\1bx/')
          release_branch_name="release/v${stable_version_branch_part}-${prerelease_version_branch_part}"

          git push origin HEAD:$release_branch_name

          echo "STABLE_VERSION=$stable_version" >> $GITHUB_ENV
          echo "PRERELEASE_VERSION=$prerelease_version" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_NAME=$release_branch_name" >> $GITHUB_ENV

      - name: Update version
        run: .github/scripts/update-version.sh $STABLE_VERSION $PRERELEASE_VERSION

      - name: Update the change log with the approximate release date
        run: |
          date=$(date "+%Y-%m-%d")
          sed -Ei "s/## Version $STABLE_VERSION\/$PRERELEASE_VERSION .*/## Version $STABLE_VERSION\/$PRERELEASE_VERSION ($date)/" CHANGELOG.md

      - name: Set git user
        run: .github/scripts/set-git-user.sh

      - name: Create pull request against the release branch
        env:
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          message="Prepare release ${STABLE_VERSION}/${PRERELEASE_VERSION}"
          branch="prepare-release-${STABLE_VERSION}-${PRERELEASE_VERSION}"

          git commit -a -m "$message"
          git push origin HEAD:$branch
          gh pr create --title "[$RELEASE_BRANCH_NAME] $message" \
                       --body "$message." \
                       --head $branch \
                       --base $RELEASE_BRANCH_NAME

  create-pull-request-against-main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          stable_version=$(./scripts/eachdist.py version --mode stable)
          stable_version=${stable_version//-dev/}
          if [[ $stable_version =~ ^([0-9]+)\.([0-9]+)\.0-dev$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            next_version="$major.$((minor + 1)).0"
          elif [[ $stable_version =~ ^([0-9]+)\.([0-9]+)\.0 ]]; then
            # pre-release version, e.g. 1.9.0rc
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            next_version="$major.$minor.0"
          else
            echo "unexpected stable_version: $stable_version"
            exit 1
          fi

          prerelease_version=$(./scripts/eachdist.py version --mode prerelease)
          prerelease_version=${prerelease_version//-dev/}
          if [[ $prerelease_version =~ ^0\.([0-9]+)b[0-9]+$ ]]; then
            prerelease_minor="${BASH_REMATCH[1]}"
          else
            echo "unexpected prerelease_version: $prerelease_version"
            exit 1
          fi

          echo "NEXT_STABLE_VERSION=$stable_major.$((stable_minor + 1)).0-dev" >> $GITHUB_ENV
          echo "NEXT_PRERELEASE_VERSION=0.$((prerelease_minor + 1))b0-dev" >> $GITHUB_ENV

      - name: Update version
        run: .github/scripts/update-version.sh $NEXT_STABLE_VERSION $NEXT_PRERELEASE_VERSION

      - name: Set git user
        run: .github/scripts/set-git-user.sh

      - name: Create pull request against main
        env:
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          message="Update version to ${NEXT_STABLE_VERSION}/${NEXT_PRERELEASE_VERSION}"
          body="Update version to \`${NEXT_STABLE_VERSION}/${NEXT_PRERELEASE_VERSION}\`."
          branch="update-version-to-${NEXT_STABLE_VERSION}-${NEXT_PRERELEASE_VERSION}"

          git commit -a -m "$message"
          git push origin HEAD:$branch
          gh pr create --title "$message" \
                       --body "$body" \
                       --head $branch \
                       --base main
