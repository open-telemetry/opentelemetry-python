name: Release
on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ $GITHUB_REF_NAME != release/* ]]; then
            echo this workflow should only be run against release branches
            exit 1
          fi

      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          stable_version=$(./scripts/eachdist.py version --mode stable)
          prerelease_version=$(./scripts/eachdist.py version --mode prerelease)

          if [[ $stable_version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            stable_major="${BASH_REMATCH[1]}"
            stable_minor="${BASH_REMATCH[2]}"
            stable_patch="${BASH_REMATCH[3]}"
          else
            echo "unexpected stable_version: $stable_version"
            exit 1
          fi
          if [[ $stable_patch != 0 ]]; then
            if [[ $prerelease_version =~ ^0\.([0-9]+)b([0-9]+)$ ]]; then
              prerelease_minor="${BASH_REMATCH[1]}"
              prerelease_patch="${BASH_REMATCH[2]}"
            else
              echo "unexpected prerelease_version: $prerelease_version"
              exit 1
            fi
            if [[ $prerelease_patch != 0 ]]; then
              prior_combined_version_when_patch="$stable_major.$stable_minor.$((stable_patch - 1))/0.${prerelease_minor}b$((prerelease_patch - 1))"
            fi
          fi

          echo "STABLE_VERSION=$stable_version" >> $GITHUB_ENV
          echo "PRERELEASE_VERSION=$prerelease_version" >> $GITHUB_ENV

          echo "PRIOR_COMBINED_VERSION_WHEN_PATCH=$prior_combined_version_when_patch" >> $GITHUB_ENV

      - name: Generate release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # conditional block not indented because of the heredoc
          if [[ ! -z $PRIOR_COMBINED_VERSION_WHEN_PATCH ]]; then
          cat > /tmp/release-notes.txt << EOF
          This is a patch release on the previous $PRIOR_COMBINED_VERSION_WHEN_PATCH release, fixing the issue(s) below.

          EOF
          fi

          # the complex perl regex is needed because markdown docs render newlines as soft wraps
          # while release notes render them as line breaks
          sed -n "0,/^## Version $STABLE_VERSION\/$PRERELEASE_VERSION/d;/^## Version /q;p" CHANGELOG.md \
            | perl -0pe 's/(?<!\n)\n *(?!\n)(?![-*] )(?![1-9]+\. )/ /g' \
            >> /tmp/release-notes.txt

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create --target $GITHUB_REF_NAME \
                            --title "Version $STABLE_VERSION/$PRERELEASE_VERSION" \
                            --notes-file /tmp/release-notes.txt \
                            --discussion-category announcements \
                            v$STABLE_VERSION

      - name: Set git user
        run: .github/scripts/set-git-user.sh

      - name: Create pull request against main
        env:
          # not using the default GITHUB_TOKEN because pull requests generated by it do not run any workflows
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          message="Copy change log updates from $GITHUB_REF_NAME"
          body="Copy log updates from \`$GITHUB_REF_NAME\`."
          branch="copy-change-log-updates-from-${GITHUB_REF_NAME//\//-}"

          # perform a smart copy of the change log entries for the given release to main
          # TODO (trask)

          git commit -a -m "$message"
          git push origin HEAD:$branch
          gh pr create --title "$message" \
                       --body "$body" \
                       --head $branch \
                       --base main
